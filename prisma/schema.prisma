// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator erd {
  provider = "prisma-erd-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model channel {
  id           Int            @id @default(autoincrement())
  name         String?        @unique
  store        store[]
  cred_channel cred_channel[]
}

model cred_channel {
  id           Int      @id @default(autoincrement())
  clientId     String?
  clientSecret String?
  accToken     String?
  appId        String?
  tokenType    String?
  channel      channel? @relation(fields: [channelId], references: [id])
  channelId    Int?
}

model user {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  store         store[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model store {
  id            Int             @id @default(autoincrement())
  channel       channel?        @relation(fields: [channelId], references: [id])
  name          String?
  identifier    String?         @unique
  origin_id     String?         @unique
  status        String?
  user          user?           @relation(fields: [userId], references: [id])
  channelId     Int?
  userId        String?
  orders        orders[]
  main_products main_products[]
  chat          chat[]
  omnichat      omnichat[]
}

model customers {
  id        Int      @id @default(autoincrement())
  name      String?
  origin_id String?  @unique
  phone     String?
  email     String?
  orders    orders[]
}

model products_img {
  id              Int            @id @default(autoincrement())
  origin_id       String?
  filename        String?
  status          String?
  width           Int?
  height          Int?
  originalUrl     String?
  thumbnailUrl    String?
  main_products   main_products? @relation(fields: [main_productsId], references: [id])
  main_productsId Int?
}

model main_products {
  id           Int            @id @default(autoincrement())
  origin_id    String?        @unique
  shop_id      store?         @relation(fields: [storeId], references: [id])
  status       String?
  name         String?
  condition    Int?
  desc         String?
  category     Int?
  price        Int?
  currency     String?
  createdAt    DateTime       @default(now())
  weight       Int?
  stock        Int?
  sku          String?
  product_img  products_img[]
  storeId      Int?
  ord_products ord_products[]
}

model ord_products {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  qty             Int
  main_product    main_products? @relation(fields: [main_productsId], references: [id])
  invoice         String?
  total_price     Int
  notes           String?
  orders          orders?        @relation(fields: [ordersId], references: [id])
  ordersId        Int?
  main_productsId Int?
}

model logistic {
  id     Int      @id @default(autoincrement())
  name   String?  @unique
  orders orders[]
}

model voucher {
  id   Int     @id @default(autoincrement())
  type String?
  code String?
}

model orders {
  id                    Int            @id @default(autoincrement())
  createdAt             DateTime       @default(now())
  status                String?
  store                 store?         @relation(fields: [storeId], references: [id])
  shop_id               String?
  payment_id            String?
  origin_id             String?
  products              ord_products[]
  invoice               String?
  customers             customers?     @relation(fields: [customersId], references: [id])
  recp_name             String?
  recp_phone            String?
  recp_addr_full        String?
  recp_addr_district    String?
  recp_addr_city        String?
  recp_addr_province    String?
  recp_addr_country     String?
  recp_addr_postal_code String?
  recp_addr_district_id String?
  recp_addr_city_id     String?
  recp_addr_province_id String?
  recp_addr_geo         String?
  logistic              logistic?      @relation(fields: [logisticId], references: [id])
  logistic_service      String?
  origin_createdAt      DateTime       @default(now())
  accept_partial        Boolean
  device                String?
  storeId               Int?
  customersId           Int?
  logisticId            Int?
  total_product_price   Int?
  shipping_price        Int?
  total_amount          Int?
}

model chat {
  id        Int         @id @default(autoincrement())
  origin_id String?     @unique
  chat_line chat_line[]
  store     store?      @relation(fields: [storeId], references: [id])
  storeId   Int?
}

model chat_user {
  id           Int         @id @default(autoincrement())
  username     String?
  thumbnailUrl String?
  origin_id    String?     @unique
  chat_line    chat_line[]
}

model chat_line {
  id              Int            @id @default(autoincrement())
  origin_id       String?        @unique
  chat_user       chat_user?     @relation(fields: [chat_userId], references: [id])
  chat            chat?          @relation(fields: [chatId], references: [id])
  createdAt       DateTime       @default(now())
  line_text       String         @db.Text
  chat_userId     Int?
  chatId          Int?
  omnichat_user   omnichat_user? @relation(fields: [omnichat_userId], references: [id])
  omnichat_userId Int?
}

model omnichat_user {
  id            Int             @id @default(autoincrement())
  username      String?
  thumbnailUrl  String?
  origin_id     String?         @unique
  chat_line     chat_line[]
  createdAt     DateTime        @default(now())
  omnichat      omnichat[]
  omnichat_line omnichat_line[]
}

model omnichat {
  id              Int             @id @default(autoincrement())
  origin_id       String?         @unique
  last_message    String          @db.Text
  last_messageId  String?
  store           store?          @relation(fields: [storeId], references: [id])
  omnichat_user   omnichat_user?  @relation(fields: [omnichat_userId], references: [id])
  messages        omnichat_line[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now())
  storeId         Int?
  omnichat_userId Int?
}

model omnichat_line {
  id              Int            @id @default(autoincrement())
  origin_id       String?        @unique
  omnichat        omnichat?      @relation(fields: [omnichatId], references: [id])
  createdAt       DateTime       @default(now())
  line_text       String         @db.Text
  omnichatId      Int?
  author          String?
  omnichat_user   omnichat_user? @relation(fields: [omnichat_userId], references: [id])
  omnichat_userId Int?
}
